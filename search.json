[{"path":"https://timtaylor.github.io/qalytools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Crown Copyright (UK Health Security Agency) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://timtaylor.github.io/qalytools/articles/example_analysis.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"EQ-5D Analysis","text":"vignette show way analyse longitudinal EQ-5D data using statistical models functionality qalytools package. goal calculate utility values, identify explanatory variables calculate QALY loss. builds upon introductory vignette (vignette(\"example_analysis\")) utilises synthetic EQ-5D-5L data contained within package.","code":"library(qalytools) # for utility and qaly calculations library(dplyr)     # for data wrangling library(tidyr)     # for data wrangling library(purrr)     # for mapping library(stringr)   # for string manipulation library(lme4)      # for modelling library(ggplot2)   # for plotting data(\"EQ5D5L_surveys\")"},{"path":"https://timtaylor.github.io/qalytools/articles/example_analysis.html","id":"a-simple-model","dir":"Articles","previous_headings":"","what":"A simple model","title":"EQ-5D Analysis","text":"survey includes age participants. analysis group participants age (\\([20,40), [40,60), [60,+)\\)). common practice field, health outcomes generally highly dependent age participants. Next calculate utility values using value NICE Decision Support Unit (DSU) value set. maps 5L 3L whilst also accounting sex age respondents. using mixed effect model fit utility values. model defined value ~ (1 + acute | respondentID) + surveyID + sex + AgeGroup + sex:AgeGroup. means assume respondent random effect well random interaction first survey symptoms (acute). explanatory variables survey, sex age group (interaction sex age group). model chosen based knowledge data. dataset recommended choose model. example, exploring multiple models choosing best model (using standard model comparison methods). fit mixed effect model use lme4 package. utility value truncated 1, shown assuming normal distribution performing non parametric bootstrap valid simplification (Pullenayegum et al. 2010 Jun-Jul). Comparing modelled utility values utility values model. Utility values calculated EQ5D5L survey using DSU method. use non parametric bootstrap calculate uncertainty model. bootstrap resample (replacement) respondents fit model resampled data. Using bootstrapped models can capture uncertainty coefficients explanatory variables (see figure ). Unsurprisingly, shows survey 2 associated lowest utility value. Survey 3, 4 5 also significantly worse outcomes survey 1, respondents returned base line levels utility survey 6 onwards. find significant correlation age sex utility values, except 60 year old males, experienced lower utility groups. Coefficients statistical model. Uncertainty captured fitting model bootstrapped data. blue colour highlights coefficients significant. Finally, use model generate utility values calculate QALY loss age group. QALY loss compared full health increase age, compared baseline health (survey 1) stayed relatively stable. QALY values based model. cross mean QALY based data. uncertainty represents uncertainty mean QALY loss according model","code":"dat <-      qalytools::EQ5D5L_surveys |>     dplyr::mutate(AgeGroup = cut(age, c(20, 40, 60, Inf), right = FALSE)) input_dat <-      dat |>      qalytools::as_eq5d5l(         mobility = \"mobility\",         self_care = \"self_care\",         usual = \"usual\",         pain = \"pain\",         anxiety = \"anxiety\",         respondentID = \"respondentID\",         surveyID = \"surveyID\",         vas = \"vas\"     ) |>     qalytools::add_utility(type = \"DSU\", country = \"UK\", age = \"age\", sex = \"sex\") # Label the acute period of the disease dat <- dplyr::mutate(input_dat, acute = surveyID == \"survey02\")  # Define the model model <- .value ~ (1 + acute | respondentID) +     surveyID + sex + AgeGroup + sex:AgeGroup fit2 <- lme4::lmer(model, data = dat)  # Compare predictions to the actual value plot_dat <-      dat |>     dplyr::mutate(Model = predict(fit2)) |>     dplyr::rename(Actual = .value) |>     tidyr::pivot_longer(c(Actual, Model), names_to = \"type\", values_to = \"value\")  ggplot2::ggplot(plot_dat) +     ggplot2::geom_line(         ggplot2::aes(x = surveyID, y = value, group = respondentID, colour = sex),         alpha = 0.1     ) +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 45, vjust = 1, hjust = 1)     ) +     ylab(\"Utility value\") +     ggplot2::facet_grid(. ~ type) set.seed(1) # Using 100 samples for illustrative purposes. # For full analysis you should use >1000 nboot <- 100  respondents_dat <- dplyr::distinct(dat, respondentID)  models <-      seq(1, nboot) |>      purrr::map(         purrr:::quietly(function(np_id) {             # Sample the respondents to include in this bootstrap and give them             # a unique id (boot_respondent_id)             boot_dat <-                  respondents_dat |>                  dplyr::sample_n(nboot, replace = TRUE) |>                  dplyr::mutate(boot_respondent_id = dplyr::row_number()) |>                  dplyr::left_join(dat, by = \"respondentID\")                        fit <- lme4::lmer(                 .value ~ (1 + acute | boot_respondent_id) + surveyID +                      sex + AgeGroup + sex:AgeGroup,                 data = boot_dat             )                        list(model = fit, np = as.numeric(np_id), data = boot_dat)         })     ) |>      purrr::keep(function(lst0) length(lst0$warnings) == 0) # Gather coefficients from the bootstrapped models coeff_dat <-      models |>      purrr::imap(function(model, np_id) {         summary(model$result$model)$coefficients |>              dplyr::as_tibble(rownames = \"id\") |>             dplyr::mutate(np = np_id)     }) |>      dplyr::bind_rows()  plot_dat <-      coeff_dat |>     dplyr::group_by(id) |>     dplyr::summarise(         quant = c(0.025, 0.25, 0.5, 0.75, 0.975),         value = quantile(Estimate, quant),         Significant = all(value < 0) || all(value > 0),         .groups = \"drop\"     ) |>      tidyr::pivot_wider(names_from = quant, values_from = value) |>      # Cleanup names of the coefficients     dplyr::mutate(idname = stringr::str_replace(id, \"(sex|surveyID)\", \"\")) |>     dplyr::filter(idname != \"(Intercept)\")  ggplot2::ggplot(data = plot_dat) +     ggplot2::geom_linerange(         ggplot2::aes(x = idname, ymin = `0.025`, ymax = `0.975`, colour = Significant),         size = 1     ) +     ggplot2::geom_linerange(         ggplot2::aes(x = idname, ymin = `0.25`, ymax = `0.75`, colour = Significant),         size = 2     ) +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 45, vjust = 1, hjust = 1),         axis.title.x = ggplot2::element_blank(),         legend.position = \"none\"     ) # Calculate the QALY values for the different bootstrapped models qaly_dat <-      models |>     purrr::imap(function(lst0, np_id) {         lst0$result$data |>             dplyr::mutate(pvalue = predict(lst0$result$model)) |>             # Convert to utility             qalytools::new_utility(                 respondentID = \"boot_respondent_id\",                 surveyID = \"surveyID\",                 country = \".utility_country\",                 type = \".utility_type\",                 value = \"pvalue\"             ) |>             qalytools::validate_utility() |>             # Calculate the qaly for based on the utility values             qalytools::calculate_qalys(                 baseline_survey = \"survey01\",                 time_index = \"time_index\"             ) |>             dplyr::mutate(np = as.numeric(np_id)) |>             dplyr::left_join(                 dplyr::distinct(lst0$result$data, boot_respondent_id, AgeGroup, sex),                 by = \"boot_respondent_id\"             )     }) |>      dplyr::bind_rows() plot_dat <-      qaly_dat |>     dplyr::group_by(.qaly, AgeGroup, np) |>     dplyr::summarise(value = mean(.value)) |>     dplyr::group_by(.qaly, AgeGroup) |>     dplyr::summarise(         quant = c(0.025, 0.25, 0.5, 0.75, 0.975),         value = quantile(value, quant),         groups = \"drop\"     ) |>     tidyr::pivot_wider(names_from = quant, values_from = value) |>      dplyr::filter(.qaly != \"raw\")  # Include qalys calculated from the raw data dat0 <-      input_dat |>     qalytools::calculate_qalys(         baseline_survey = \"survey01\",         time_index = \"time_index\"     ) |>     dplyr::filter(.qaly != \"raw\") |>     dplyr::left_join(distinct(dat,respondentID, AgeGroup, sex)) |>     dplyr::group_by(AgeGroup, .qaly) |>     dplyr::summarise(mean = mean(.value), .groups = \"drop\") #> Joining, by = \"respondentID\"  ggplot2::ggplot(data = plot_dat) +     ggplot2::geom_linerange(         ggplot2::aes(x = AgeGroup, ymin = `0.025`, ymax = `0.975`, colour = .qaly, group = .qaly),         position = ggplot2::position_dodge2(0.5)     ) +     ggplot2::geom_linerange(         ggplot2::aes(x = AgeGroup, ymin = `0.25`, ymax = `0.75`, colour = .qaly, group = .qaly),         position = position_dodge2(0.5),         size = 2     ) +     ggplot2::geom_point(         data = dat0,          ggplot2::aes(x = AgeGroup, y = mean, group = .qaly),         position = ggplot2::position_dodge2(0.5),         size = 3,         shape = 4     ) +     ggplot2::expand_limits(y = 0)"},{"path":"https://timtaylor.github.io/qalytools/articles/example_analysis.html","id":"using-a-bayesian-approach-with-the-brms-package","dir":"Articles","previous_headings":"","what":"Using a Bayesian approach with the brms package","title":"EQ-5D Analysis","text":"alternative bootstrap approach highlighted , one can also use Bayesian approach using brms R package. benefit approach Bayesian approach takes account uncertainty given data bootstrap therefore needed. One practical challenges approach fitting models computationally intensive. Consequently model selection exercise also take significantly longer using approach recommended (Pullenayegum et al. 2010 Jun-Jul). Note overall results method similar mixed effect model , resulting uncertainty much smaller. result different ways uncertainty accounted models. Comparing modelled utility values, using bayesian model, utility values model. Utility values calculated EQ5D5L survey using DSU method. Coefficients bayesian model. Uncertainty captured fitting model bootstrapped data. blue colour highlights coefficients significant. Note transformed utility variable, sign opposite previous results. QALY values based bayesian model. cross mean QALY based data. uncertainty represents uncertainty mean QALY loss according model","code":"# Uncomment to use multiple cores for brms # options(mc.cores = 4) library(brms) #> Loading required package: Rcpp #> Loading 'brms' package (version 2.17.0). Useful instructions #> can be found by typing help('brms'). A more detailed introduction #> to the package is available through vignette('brms_overview'). #>  #> Attaching package: 'brms' #> The following object is masked from 'package:lme4': #>  #>     ngrps #> The following object is masked from 'package:stats': #>  #>     ar  input_dat |>   dplyr::mutate(acute = surveyID == \"survey02\") -> dat  brms::brm(bf(.value ~ (1 + acute | respondentID) + surveyID + sex + AgeGroup +        sex:AgeGroup), data = dat, family = gaussian(), iter = 2000,     # Suppress messages for the vignette     silent = 2, refresh = 0, open_progress = F) -> brm_model  # Draw posterior samples to use in qaly calculation. We ignore the residual errors/measurement # when calculating the QALY by using posterior_epred (instead of posterior_predict)  brms::posterior_epred(brm_model, newdata = dat, ndraws = 1000) -> posterior_dat  # For each posterior sample, calculate the qaly loss purrr::map(seq_len(nrow(posterior_dat)), function(np_id) {   dat |> dplyr::mutate(pvalue = posterior_dat[as.numeric(np_id), ]) |>     qalytools::new_utility(respondentID = \"respondentID\",                              surveyID = \"surveyID\",                              country = \".utility_country\",                              type = \".utility_type\",                              value = \"pvalue\") |>     qalytools::validate_utility() |>     qalytools::calculate_qalys(baseline_survey = \"survey01\",                                time_index = \"time_index\") |>     dplyr::mutate(np = as.numeric(np_id)) }) |> dplyr::bind_rows() |>     dplyr::left_join(dat |>       dplyr::select(respondentID, AgeGroup, sex) |>       dplyr::distinct()) -> qaly_dat #> Joining, by = \"respondentID\" # For comparison, plot posterior using one posterior sample dat |> dplyr::mutate(pvalue = posterior_dat[1, ]) |>   qalytools::new_utility(respondentID = \"respondentID\",                            surveyID = \"surveyID\",                            country = \".utility_country\",                            type = \".utility_type\",                            value = \"pvalue\") |>   qalytools::validate_utility() -> dat0 dat0 |>   dplyr::rename(Actual = .value, Model = pvalue) |>   tidyr::gather(type, value, Actual, Model) -> plot_dat  ggplot(plot_dat) +   geom_line(aes(x = surveyID, y = value, group = respondentID,                 colour = sex), alpha = 0.1) +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +   ylab(\"Utility value\") +   facet_grid(. ~ type) fixef(brm_model, probs = c(0.025, 0.25, 0.5, 0.75, 0.975)) -> dat0 dat0 |>   as_tibble() |>   dplyr::mutate(id = rownames(dat0)) |>   dplyr::mutate(Significant = (`Q2.5` < 0 & `Q97.5` < 0) |                 (`Q2.5` > 0 & `Q97.5` > 0)) |>   # Cleanup names of the coefficients   dplyr::mutate(idname = stringr::str_replace(id, \"(sex|surveyID)\", \"\")) |>   dplyr::filter(idname != \"Intercept\") -> plot_dat  ggplot(data = plot_dat) +   geom_linerange(aes(x = idname, ymin = `Q2.5`, ymax = `Q97.5`,                      colour = Significant), size = 1) +   geom_linerange(aes(x = idname, ymin = `Q25`, ymax = `Q75`,                      colour = Significant), size = 2) +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),         axis.title.x = element_blank(),         legend.position = \"none\") qaly_dat |>   dplyr::group_by(.qaly, AgeGroup, np) |>   dplyr::summarise(value = mean(.value)) |>   dplyr::group_by(.qaly, AgeGroup) |>   dplyr::summarise(quant = c(0.025, 0.25, 0.5, 0.75, 0.975),                    value = quantile(value, quant)) |>   dplyr::ungroup() |>   tidyr::spread(quant, value) |>   dplyr::filter(.qaly != \"raw\") -> plot_dat  # Include qalys calculated from the raw data input_dat |>   qalytools::calculate_qalys(baseline_survey = \"survey01\", time_index = \"time_index\") |>   dplyr::filter(.qaly != \"raw\") |>   dplyr::left_join(dat |>     dplyr::select(respondentID, AgeGroup, sex) |>     dplyr::distinct()) |>   dplyr::group_by(AgeGroup, .qaly) |>   dplyr::summarise(mean = mean(.value)) |>   dplyr::ungroup() -> dat0 #> Joining, by = \"respondentID\" ggplot(data = plot_dat) +   geom_linerange(aes(x = AgeGroup, ymin = `0.025`, ymax = `0.975`,                      colour = .qaly, group = .qaly),                  position = position_dodge2(0.5)) +   geom_linerange(aes(x = AgeGroup, ymin = `0.25`, ymax = `0.75`,                      colour = .qaly, group = .qaly),                  position = position_dodge2(0.5),                  size = 2) +   geom_point(data = dat0, aes(x = AgeGroup, y = mean, group = .qaly),                  position = position_dodge2(0.5), size = 3,                  shape = 4) +   ylab(\"Utility value\") +   expand_limits(y = 0)"},{"path":[]},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"qalytools","text":"package provides range functions: Constructors (validators) EQ5D data frame subclasses (EQ5D3L, EQ5D5L EQ5D): new_eq5d3l() (validate_eq5d3l()), new_eq5d5l() (validate_eq5d5l()) new_eq5dy() (validate_eq5dy()). User-friendly coercion functions as_eq5d3l(), as_eq5d5l() as_eq5dy(). calculation utility values based range different value sets. functionality provided via calculate_utility(), add_utility() available_valuesets() functions wrappers around eq5d package. calculation different Quality Life Years (QALY) metrics including unadjusted ‘raw’ values, disutility perfect health , optionally, specified baseline. See calculate_qalys(). calculation Paretian Classification Health Change (PCHC) individual’s health state two surveys via calculate_pchc() (wrapping eq5d package). Easy calculation responses health limitation (.e. non-one response one dimensions) via calculate_limitation(). Whilst vignette provides introduction core functionality package, detailed analysis example can found vignette(\"example_analysis\").","code":""},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"the-eq5d-object-class","dir":"Articles","previous_headings":"","what":"The EQ5D object class","title":"qalytools","text":"define EQ5D object table data represented long format meets additional criteria: contains columns represent dimensions EQ5D survey specification well column representing Visual Analogue Score (columns ‘mobility’, ‘self_care’, ‘usual’, ‘pain’, ‘anxiety’ ‘vas’ example table ) Dimension values must whole numbers, bounded 1 3 EQ5D3L EQ5D3Y surveys bounded 1 5 EQ5D5L surveys contains column acts unique respondent identifier (respondentID) another identifying different surveys time (`surveyID). Together uniquely identify response (.e. combination duplicated within given data frame). Example EQ5D5L object qalytools EQ5D objects implemented subclass data frame provide associated methods working class.","code":""},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"qalytools","text":"following examples make use synthetic EQ-5D-5L data set included package","code":"library(qalytools) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)  # Example EQ5D5L data data(\"EQ5D5L_surveys\") glimpse(EQ5D5L_surveys) #> Rows: 10,000 #> Columns: 12 #> $ surveyID     <chr> \"survey01\", \"survey02\", \"survey03\", \"survey04\", \"survey05… #> $ respondentID <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ sex          <chr> \"Female\", \"Female\", \"Female\", \"Female\", \"Female\", \"Female… #> $ age          <int> 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 30, 30, 30, 30, 3… #> $ mobility     <int> 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 5, 5, 1, 1, 3, 1, 1, 2, 1, … #> $ self_care    <int> 1, 4, 5, 2, 2, 1, 1, 1, 3, 1, 1, 2, 3, 3, 3, 4, 4, 3, 2, … #> $ usual        <int> 2, 5, 2, 5, 3, 1, 2, 2, 2, 2, 1, 5, 5, 3, 5, 2, 2, 1, 3, … #> $ pain         <int> 1, 5, 1, 2, 3, 2, 1, 2, 1, 1, 1, 5, 1, 2, 1, 2, 2, 2, 3, … #> $ anxiety      <int> 1, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 1, 1, 1, 2, 2, … #> $ time_index   <dbl> 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 30, 60, 90… #> $ vas          <dbl> 96, 22, 61, 65, 78, 88, 85, 95, 94, 87, 73, 8, 60, 70, 67… #> $ dummy        <lgl> TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE,…"},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"coercion","dir":"Articles","previous_headings":"Usage","what":"Coercion","title":"qalytools","text":"utilising methods qalytools must first coerce input data <EQ5D5L> object class via as_eq5d5l()","code":"dat <- as_eq5d5l(     EQ5D5L_surveys,     mobility = \"mobility\",     self_care = \"self_care\",     usual = \"usual\",     pain = \"pain\",     anxiety = \"anxiety\",     respondentID = \"respondentID\",     surveyID = \"surveyID\",     vas = \"vas\", ) dat #> # EQ-5D-5L: 10,000 x 12 #>    surve…¹ respo…² sex     age mobil…³ self_…⁴ usual  pain anxiety time_…⁵   vas #>  * <chr>     <int> <chr> <int>   <int>   <int> <int> <int>   <int>   <dbl> <dbl> #>  1 survey…       1 Fema…    25       2       1     2     1       1      30    96 #>  2 survey…       1 Fema…    25       1       4     5     5       3      60    22 #>  3 survey…       1 Fema…    25       1       5     2     1       3      90    61 #>  4 survey…       1 Fema…    25       1       2     5     2       2     120    65 #>  5 survey…       1 Fema…    25       1       2     3     3       1     150    78 #>  6 survey…       1 Fema…    25       2       1     1     2       1     180    88 #>  7 survey…       1 Fema…    25       2       1     2     1       1     210    85 #>  8 survey…       1 Fema…    25       1       1     2     2       1     240    95 #>  9 survey…       1 Fema…    25       1       3     2     1       1     270    94 #> 10 survey…       1 Fema…    25       2       1     2     1       1     300    87 #> # … with 9,990 more rows, 1 more variable: dummy <lgl>, and abbreviated #> #   variable names ¹​surveyID, ²​respondentID, ³​mobility, ⁴​self_care, ⁵​time_index #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"descriptive-methods","dir":"Articles","previous_headings":"Usage","what":"Descriptive methods","title":"qalytools","text":"obtain quick overview data can call summary(). default returns output list data frames, showing frequency counts proportions, split surveyID Alternatively can set parameter tidy TRUE obtain summary data “tidy” (long) format. can useful look percentage responses, across dimensions, equal one. can done calculate_limitation() function","code":"head(summary(dat), n = 2) #> $survey01 #> # A data frame: 6 × 6 #>   value mobility self_care usual  pain anxiety #>   <dbl>    <dbl>     <dbl> <dbl> <dbl>   <dbl> #> 1     1      666       608   401   320     574 #> 2     2      196       131   303   359     235 #> 3     3      114       205   166   287     150 #> 4     4       19        18    61    24      29 #> 5     5        5        38    69    10      12 #> 6    NA        0         0     0     0       0 #>  #> $survey02 #> # A data frame: 6 × 6 #>   value mobility self_care usual  pain anxiety #>   <dbl>    <dbl>     <dbl> <dbl> <dbl>   <dbl> #> 1     1      396       106   142    26      47 #> 2     2      248       169   177    71      92 #> 3     3      194       214   160    93     103 #> 4     4       83       277   237   364     381 #> 5     5       79       234   284   446     377 #> 6    NA        0         0     0     0       0 summary(dat, tidy = TRUE) #> # A data frame: 300 × 4 #>    surveyID dimension value count #>    <chr>    <fct>     <dbl> <dbl> #>  1 survey01 mobility      1   666 #>  2 survey01 mobility      2   196 #>  3 survey01 mobility      3   114 #>  4 survey01 mobility      4    19 #>  5 survey01 mobility      5     5 #>  6 survey01 mobility     NA     0 #>  7 survey01 self_care     1   608 #>  8 survey01 self_care     2   131 #>  9 survey01 self_care     3   205 #> 10 survey01 self_care     4    18 #> # … with 290 more rows #> # ℹ Use `print(n = ...)` to see more rows limitation <- calculate_limitation(dat) limitation #> # A data frame: 50 × 3 #>    surveyID dimension without_limitation #>    <chr>    <fct>                  <dbl> #>  1 survey01 mobility               0.666 #>  2 survey02 mobility               0.396 #>  3 survey03 mobility               0.647 #>  4 survey04 mobility               0.637 #>  5 survey05 mobility               0.613 #>  6 survey06 mobility               0.637 #>  7 survey07 mobility               0.645 #>  8 survey08 mobility               0.651 #>  9 survey09 mobility               0.642 #> 10 survey10 mobility               0.671 #> # … with 40 more rows #> # ℹ Use `print(n = ...)` to see more rows  ggplot(limitation, aes(x = surveyID, y = without_limitation, group = dimension)) +     geom_line(aes(colour = dimension)) +     theme_light() +     scale_y_continuous(n.breaks = 10, expand = c(0.005, 0.005), limits = c(0, 1)) +     scale_x_discrete() +     scale_fill_discrete(name = \"dimension\") +     ylab(\"Without limitation\")"},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"calculating-utility-values","dir":"Articles","previous_headings":"Usage","what":"Calculating utility values","title":"qalytools","text":"calculate utility values call calculate_utility() EQ5D object additional arguments specifying countries type interested . calculate_utility() return desired values split country, type, respondentID surveyID. prefer augment utility values top input object also provide add_utility() function. can obtain list compatible value sets (across countries type) passing EQ5D object directly available_valuesets() function passing comparable string. EQ5D3L inputs type can : “TTO”, time trade-valuation technique; “VAS”, visual analogue scale valuation technique; “RCW”, reverse crosswalk conversion EQ5D5L values; “DSU”, NICE Decision Support Unit’s model allows mappings EQ5D5L values accounting age sex. EQ5D5L inputs can : “VT”, value sets generated via EuroQol standardised valuation study protocol; “CW”, crosswalk conversion EQ5D3L values; “DSU”, NICE Decision Support Unit’s model allows mappings EQ5D5L values accounting age sex. Note available_valuesets()convenience wrapper around eq5d::valuesets() function. return data frame columns representing EQ5D version, value set country value set type.  details available value sets, consult documentation wrapped eq5d package via vignette(topic = \"eq5d\", package = \"eq5d\").","code":"vs <- available_valuesets(dat) head(vs, 10) #> # A data frame: 10 × 3 #>    Version  Type  Country  #>  * <chr>    <chr> <chr>    #>  1 EQ-5D-5L VT    Belgium  #>  2 EQ-5D-5L VT    Canada   #>  3 EQ-5D-5L VT    China    #>  4 EQ-5D-5L VT    Denmark  #>  5 EQ-5D-5L VT    Egypt    #>  6 EQ-5D-5L VT    England  #>  7 EQ-5D-5L VT    Ethiopia #>  8 EQ-5D-5L VT    France   #>  9 EQ-5D-5L VT    Germany  #> 10 EQ-5D-5L VT    HongKong  # comparable character values will also give the same result identical(vs, available_valuesets(\"eq5d5l\")) #> [1] TRUE  # cross walk comparison vs <- filter(vs, Country %in% c(\"England\", \"UK\"), Type %in% c(\"VT\", \"CW\")) util <- calculate_utility(dat, type = vs$Type, country = vs$Country)  # plot the results util$fill <- paste(util$.utility_country, util$.utility_type) ggplot(util, aes(x = surveyID, y = .value, fill = fill)) +     geom_boxplot(lwd = 1, outlier.shape = 4) +     stat_summary(         mapping = aes(group = .utility_country),         fun = mean,         geom = \"point\",         position = position_dodge(width = 0.75),         shape = 21,         color = \"black\",         fill = \"white\"     ) +     theme_light() +     geom_hline(yintercept = 0, linetype = \"longdash\", size = 0.6, color = \"grey30\") +     scale_y_continuous(n.breaks = 10, expand = c(0.005, 0.005)) +     scale_x_discrete(name = \"value set\")"},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"qaly-calculations","dir":"Articles","previous_headings":"Usage","what":"QALY calculations","title":"qalytools","text":"Quality life years can calculated directly utility values. default, two different metrics provided. Firstly, “raw” value simply scaled area utility curve , secondly, value represents loss full health. calculate_qalys() also allows us calculate loss specified baseline one two ways. Firstly, character string baseline_survey argument can placed matches survey present utility data. argument passed utility values specified survey used calculate loss. Note survey still included raw, unadjusted calculation, prior calculation loss. Alternatively baseline_survey argument can specified data frame column corresponding respondentID another representing associated utility. Optionally columns corresponding utility country utility type can included allow granular comparisons. Note specification baseline, included unadjusted, raw, calculation.","code":"qalys <-     dat |>     add_utility(type = \"VT\", country = c(\"Denmark\", \"France\")) |>     calculate_qalys(time_index = \"time_index\")  filter(qalys, .qaly==\"raw\") #> # A data frame: 2,000 × 5 #>    respondentID .utility_type .utility_country .qaly .value #>           <int> <chr>         <chr>            <chr>  <dbl> #>  1            1 VT            Denmark          raw    0.544 #>  2            1 VT            France           raw    0.573 #>  3            2 VT            Denmark          raw    0.487 #>  4            2 VT            France           raw    0.503 #>  5            3 VT            Denmark          raw    0.530 #>  6            3 VT            France           raw    0.577 #>  7            4 VT            Denmark          raw    0.276 #>  8            4 VT            France           raw    0.430 #>  9            5 VT            Denmark          raw    0.506 #> 10            5 VT            France           raw    0.575 #> # … with 1,990 more rows #> # ℹ Use `print(n = ...)` to see more rows filter(qalys, .qaly==\"loss_vs_fullhealth\") #> # A data frame: 2,000 × 5 #>    respondentID .utility_type .utility_country .qaly              .value #>           <int> <chr>         <chr>            <chr>               <dbl> #>  1            1 VT            Denmark          loss_vs_fullhealth  0.195 #>  2            1 VT            France           loss_vs_fullhealth  0.166 #>  3            2 VT            Denmark          loss_vs_fullhealth  0.252 #>  4            2 VT            France           loss_vs_fullhealth  0.237 #>  5            3 VT            Denmark          loss_vs_fullhealth  0.210 #>  6            3 VT            France           loss_vs_fullhealth  0.162 #>  7            4 VT            Denmark          loss_vs_fullhealth  0.463 #>  8            4 VT            France           loss_vs_fullhealth  0.310 #>  9            5 VT            Denmark          loss_vs_fullhealth  0.233 #> 10            5 VT            France           loss_vs_fullhealth  0.164 #> # … with 1,990 more rows #> # ℹ Use `print(n = ...)` to see more rows # Reload the example data and combine with some baseline measurements data(\"EQ5D5L_surveys\") dat <-     EQ5D5L_surveys |>     as_eq5d5l(         mobility = \"mobility\",         self_care = \"self_care\",         usual = \"usual\",         pain = \"pain\",         anxiety = \"anxiety\",         respondentID = \"respondentID\",         surveyID = \"surveyID\",         vas = \"vas\"     )  add_utility(dat, type = \"VT\", country = c(\"Denmark\", \"France\")) |>     calculate_qalys(baseline_survey = \"survey01\", time_index = \"time_index\") |>     filter(.qaly == \"loss_vs_baseline\") #> # A data frame: 2,000 × 5 #>    respondentID .utility_country .utility_type .qaly              .value #>           <int> <chr>            <chr>         <chr>               <dbl> #>  1            1 Denmark          VT            loss_vs_baseline  0.141   #>  2            1 France           VT            loss_vs_baseline  0.114   #>  3            2 Denmark          VT            loss_vs_baseline  0.0892  #>  4            2 France           VT            loss_vs_baseline -0.00370 #>  5            3 Denmark          VT            loss_vs_baseline  0.0965  #>  6            3 France           VT            loss_vs_baseline  0.106   #>  7            4 Denmark          VT            loss_vs_baseline  0.175   #>  8            4 France           VT            loss_vs_baseline  0.0450  #>  9            5 Denmark          VT            loss_vs_baseline  0.142   #> 10            5 France           VT            loss_vs_baseline  0.0915  #> # … with 1,990 more rows #> # ℹ Use `print(n = ...)` to see more rows split_dat <- split(dat, dat$surveyID==\"survey01\") surveys <- split_dat[[1]] baseline <- split_dat[[2]] utility_dat <- add_utility(     surveys,     type = \"VT\",     country = c(\"Denmark\", \"France\") ) baseline_utility <-     baseline |>     add_utility(type = \"VT\", country = c(\"Denmark\", \"France\")) |>     select(respondentID,.utility_country,.utility_type,.value)  calculate_qalys(utility_dat, baseline_survey = baseline_utility, time_index = \"time_index\") |>     filter(.qaly == \"loss_vs_baseline\") #> # A data frame: 2,000 × 5 #>    respondentID .utility_country .utility_type .qaly             .value #>           <int> <chr>            <chr>         <chr>              <dbl> #>  1            1 Denmark          VT            loss_vs_baseline  0.101  #>  2            1 France           VT            loss_vs_baseline  0.0796 #>  3            2 Denmark          VT            loss_vs_baseline  0.0556 #>  4            2 France           VT            loss_vs_baseline -0.0341 #>  5            3 Denmark          VT            loss_vs_baseline  0.0672 #>  6            3 France           VT            loss_vs_baseline  0.0788 #>  7            4 Denmark          VT            loss_vs_baseline  0.145  #>  8            4 France           VT            loss_vs_baseline  0.0182 #>  9            5 Denmark          VT            loss_vs_baseline  0.0959 #> 10            5 France           VT            loss_vs_baseline  0.0553 #> # … with 1,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":[]},{"path":"https://timtaylor.github.io/qalytools/articles/qalytools.html","id":"paretian-classification-of-health-change-pchc","dir":"Articles","previous_headings":"Usage > Other functionality","what":"Paretian Classification of Health Change (PCHC)","title":"qalytools","text":"","code":"data(\"eq5d3l_example\") dat <- as_eq5d3l(     eq5d3l_example,     respondentID = \"respondentID\",     surveyID = \"surveyID\",     mobility = \"MO\",     self_care = \"SC\",     usual = \"UA\",     pain = \"PD\",     anxiety = \"AD\",     vas = \"vas\",     drop = FALSE # ensure we do not drop additional columns ) grp1 <- filter(dat, Group == \"Group1\") grp2 <- filter(dat, Group == \"Group2\") calculate_pchc(grp1, grp2) #> # A data frame: 5 × 3 #>   Change       Number Percent #>   <chr>         <dbl>   <dbl> #> 1 No change        14      14 #> 2 Improve          59      59 #> 3 Worsen           14      14 #> 4 Mixed change     13      13 #> 5 No problems       0       0 calculate_pchc(grp1, grp2, by.dimension = TRUE) #> # A data frame: 20 × 4 #>    .Dimension Change      Number Percent #>    <chr>      <chr>        <dbl>   <dbl> #>  1 MO         No change       31      31 #>  2 MO         Improve         26      26 #>  3 MO         Worsen           7       7 #>  4 MO         No problems     36      36 #>  5 SC         No change       21      21 #>  6 SC         Improve         31      31 #>  7 SC         Worsen           7       7 #>  8 SC         No problems     41      41 #>  9 UA         No change       33      33 #> 10 UA         Improve         43      43 #> 11 UA         Worsen           6       6 #> 12 UA         No problems     18      18 #> 13 PD         No change       59      59 #> 14 PD         Improve         34      34 #> 15 PD         Worsen           3       3 #> 16 PD         No problems      4       4 #> 17 AD         No change       14      14 #> 18 AD         Improve         22      22 #> 19 AD         Worsen          12      12 #> 20 AD         No problems     52      52"},{"path":"https://timtaylor.github.io/qalytools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Crown Copyright. Copyright holder, funder. Tim Taylor. Author, maintainer.","code":""},{"path":"https://timtaylor.github.io/qalytools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Taylor T (2022). qalytools: Tools Analysing EQ5D Surveys. https://github.com/TimTaylor/qalytools, https://timtaylor.github.io/qalytools/.","code":"@Manual{,   title = {qalytools: Tools for Analysing EQ5D Surveys},   author = {Tim Taylor},   year = {2022},   note = {https://github.com/TimTaylor/qalytools, https://timtaylor.github.io/qalytools/}, }"},{"path":"https://timtaylor.github.io/qalytools/index.html","id":"qalytools","dir":"","previous_headings":"","what":"Tools for Analysing EQ5D Surveys","title":"Tools for Analysing EQ5D Surveys","text":"qalytools provides simple intuitive user interface analysis EQ-5D surveys. builds upon eq5d package facilitate calculation QALY metrics, related values, across multiple surveys.","code":""},{"path":"https://timtaylor.github.io/qalytools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Analysing EQ5D Surveys","text":"development version package can installed via:","code":"repos <- c(\"https://timtaylor.r-universe.dev\", getOption(\"repos\"))     install.packages(\"qalytools\", repos = repos)"},{"path":"https://timtaylor.github.io/qalytools/index.html","id":"guidance","dir":"","previous_headings":"","what":"Guidance","title":"Tools for Analysing EQ5D Surveys","text":"installed best way familiarise package view included documentation: vignette(\"qalytools\") provides introduction main functionality package. vignette(\"example_analysis\") illustrates use package part larger analysis.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/EQ5D5L_surveys.html","id":null,"dir":"Reference","previous_headings":"","what":"EQ-5D-5L multiple survey example data — EQ5D5L_surveys","title":"EQ-5D-5L multiple survey example data — EQ5D5L_surveys","text":"dataset containing dimension values vas score 1000 respondents across 10 surveys. Data synthetically generated.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/EQ5D5L_surveys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EQ-5D-5L multiple survey example data — EQ5D5L_surveys","text":"","code":"EQ5D5L_surveys"},{"path":"https://timtaylor.github.io/qalytools/reference/EQ5D5L_surveys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EQ-5D-5L multiple survey example data — EQ5D5L_surveys","text":"data frame 10000 rows 11 variables: surveyID Survey ID respondentID Respondent ID sex Respondent sex age Respondent age mobility Mobility dimension self_care Self-care dimension usual Usual activities dimension pain Pain/discomfort dimension anxiety Anxiety/depression dimension vas VAS score time_index Relative time within survey framework dummy Random roolean variable","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.frame.EQ5D.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an EQ5D object to a data frame — as.data.frame.EQ5D","title":"Coerce an EQ5D object to a data frame — as.data.frame.EQ5D","text":"Method convert EQ5D object data frame.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.frame.EQ5D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an EQ5D object to a data frame — as.data.frame.EQ5D","text":"","code":"# S3 method for EQ5D as.data.frame(x, row.names, optional, ...)"},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.frame.EQ5D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an EQ5D object to a data frame — as.data.frame.EQ5D","text":"x EQ5D object. row.names currently used. optional currently used. ... currently used.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.frame.EQ5D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an EQ5D object to a data frame — as.data.frame.EQ5D","text":"data frame underlying EQ5D object. column names preserved attributes, including row names, dropped.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.frame.EQ5D.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce an EQ5D object to a data frame — as.data.frame.EQ5D","text":"Apart x parameters used present method signature compatibility underlying generic.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.table.EQ5D.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an EQ5D object to a data.table — as.data.table.EQ5D","title":"Coerce an EQ5D object to a data.table — as.data.table.EQ5D","text":"Method convert EQ5D object data.table.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.table.EQ5D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an EQ5D object to a data.table — as.data.table.EQ5D","text":"","code":"# S3 method for EQ5D as.data.table(x, keep.rownames, ...)"},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.table.EQ5D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an EQ5D object to a data.table — as.data.table.EQ5D","text":"x EQ5D object. keep.rownames currently used. ... currently used.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.table.EQ5D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an EQ5D object to a data.table — as.data.table.EQ5D","text":"data.table data(frame) underlying EQ5D object. column names preserved attributes, including row names, dropped.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as.data.table.EQ5D.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce an EQ5D object to a data.table — as.data.table.EQ5D","text":"Apart x parameters used present method signature compatibility underlying generic.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as_eq5d.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to an EQ5D object — as_eq5d","title":"Coerce to an EQ5D object — as_eq5d","text":"Coerce data frame EQ5D object.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as_eq5d.html","id":"the-eq-d-class","dir":"Reference","previous_headings":"","what":"The EQ5D class","title":"Coerce to an EQ5D object — as_eq5d","text":"define EQ5D object data frame meets following criteria: contains columns represent dimensions EQ5D survey specification well column representing Visual Analogue Score. contains column acts unique respondent identifier another identifies different surveys time. Together uniquely identify response combination duplicated within data frame. EQ5D3L, EQ5D5L EQ5DY objects defined subclass EQ5D objects additional restriction  corresponding dimension columns x either NA whole numbers bounded 1 3 5 (depending survey type).","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as_eq5d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to an EQ5D object — as_eq5d","text":"","code":"as_eq5d5l(   x,   respondentID,   surveyID,   mobility,   self_care,   usual,   pain,   anxiety,   vas,   ... )  as_eq5d3l(   x,   respondentID,   surveyID,   mobility,   self_care,   usual,   pain,   anxiety,   vas,   ... )  as_eq5dy(   x,   respondentID,   surveyID,   mobility,   self_care,   usual,   pain,   anxiety,   vas,   ... )"},{"path":"https://timtaylor.github.io/qalytools/reference/as_eq5d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to an EQ5D object — as_eq5d","text":"x R object. respondentID [character] name variable x uniquely identifies respondents. surveyID [character] Name variable x uniquely identifies surveys time. mobility [character] Name 'mobility' dimension x. self_care [character] Name 'self-care' dimension x. usual [character] Name 'usual activities' dimension x. pain [character] Name 'pain / discomfort' dimension x. anxiety [character] Name 'anxiety / depression' dimension x. vas [character] Name 'visual analogue score' variable x. ... arguments passed methods.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/as_eq5d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to an EQ5D object — as_eq5d","text":"EQ5D5L, EQ5D3L EQ5DY object.","code":""},{"path":[]},{"path":"https://timtaylor.github.io/qalytools/reference/as_eq5d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to an EQ5D object — as_eq5d","text":"","code":"data(\"eq5d3l_example\") as_eq5d3l(     eq5d3l_example,     respondentID = \"respondentID\",     surveyID = \"surveyID\",     mobility = \"MO\",     self_care = \"SC\",     usual = \"UA\",     pain = \"PD\",     anxiety = \"AD\",     vas = \"vas\" ) #> # EQ-5D-3L: 200 x 10 #>       MO    SC    UA    PD    AD Group  surveyID respondentID   vas  time #>  * <int> <int> <int> <int> <int> <chr>  <fct>           <int> <dbl> <dbl> #>  1     1     1     2     2     1 Group1 survey01            1    67     0 #>  2     1     1     1     2     1 Group2 survey01            2    84     0 #>  3     2     2     3     3     1 Group1 survey01            3    17     0 #>  4     1     1     1     2     1 Group2 survey01            4    73     0 #>  5     1     2     2     2     1 Group1 survey01            5    60     0 #>  6     1     1     1     1     1 Group2 survey01            6    77     0 #>  7     2     1     2     2     1 Group1 survey01            7    74     0 #>  8     1     1     1     1     1 Group2 survey01            8    96     0 #>  9     1     2     2     2     1 Group1 survey01            9    69     0 #> 10     1     2     2     1     1 Group2 survey01           10    79     0 #> # … with 190 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://timtaylor.github.io/qalytools/reference/available_valuesets.html","id":null,"dir":"Reference","previous_headings":"","what":"Available value sets — available_valuesets","title":"Available value sets — available_valuesets","text":"Generic function lists value sets available.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/available_valuesets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available value sets — available_valuesets","text":"","code":"available_valuesets(x, ...)  # S3 method for default available_valuesets(x, ...)  # S3 method for EQ5D5L available_valuesets(x, ...)  # S3 method for EQ5D3L available_valuesets(x, ...)  # S3 method for EQ5DY available_valuesets(x, ...)  # S3 method for character available_valuesets(x, ...)"},{"path":"https://timtaylor.github.io/qalytools/reference/available_valuesets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Available value sets — available_valuesets","text":"x R object. ... arguments passed methods.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/available_valuesets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available value sets — available_valuesets","text":"data.frame containing available value sets given object survey type.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/available_valuesets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Available value sets — available_valuesets","text":"available_valuesets() returns available valuesets eq5d package. s3 generic wraps eq5d::valuesets() function providing additional methods eq5d character objects. character objects, input expected survey type various forms permitted: \"eq5d5l\", \"EQ5D5L\", \"eq-5d-5l\", \"EQ-5D-5L\", \"5L\", \"5l\" \"eq5d3l\", \"EQ5D3L\", \"eq-5d-3l\", \"EQ-5D-3L\", \"3L\", \"3l\" \"eq5dy\" , \"EQ5DY\" , \"eq-5d-y\" , \"EQ-5D-Y\" , \"Y\" , \"y\" called arguments value sets available  version, type country combination returned.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/available_valuesets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Available value sets — available_valuesets","text":"","code":"data(\"eq5d3l_example\") dat <- as_eq5d3l(     eq5d3l_example,     respondentID = \"respondentID\",     surveyID = \"surveyID\",     mobility = \"MO\",     self_care = \"SC\",     usual = \"UA\",     pain = \"PD\",     anxiety = \"AD\",     vas = \"vas\" ) available_valuesets(dat) #> # A data frame: 51 × 3 #>    Version  Type  Country   #>    <chr>    <chr> <chr>     #>  1 EQ-5D-3L TTO   Argentina #>  2 EQ-5D-3L TTO   Australia #>  3 EQ-5D-3L TTO   Brazil    #>  4 EQ-5D-3L TTO   Canada    #>  5 EQ-5D-3L TTO   Chile     #>  6 EQ-5D-3L TTO   China     #>  7 EQ-5D-3L TTO   Denmark   #>  8 EQ-5D-3L TTO   Ecuador   #>  9 EQ-5D-3L TTO   France    #> 10 EQ-5D-3L TTO   Germany   #> # … with 41 more rows #> # ℹ Use `print(n = ...)` to see more rows available_valuesets(\"eq5d5l\") #> # A data frame: 54 × 3 #>    Version  Type  Country  #>    <chr>    <chr> <chr>    #>  1 EQ-5D-5L VT    Belgium  #>  2 EQ-5D-5L VT    Canada   #>  3 EQ-5D-5L VT    China    #>  4 EQ-5D-5L VT    Denmark  #>  5 EQ-5D-5L VT    Egypt    #>  6 EQ-5D-5L VT    England  #>  7 EQ-5D-5L VT    Ethiopia #>  8 EQ-5D-5L VT    France   #>  9 EQ-5D-5L VT    Germany  #> 10 EQ-5D-5L VT    HongKong #> # … with 44 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_limitation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate limitation — calculate_limitation","title":"Calculate limitation — calculate_limitation","text":"Generic function calculates limitation survey responses across response dimensions. define limitation dimension value equal 1. Methods provided eq5d objects.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_limitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate limitation — calculate_limitation","text":"","code":"calculate_limitation(x, ...)  # S3 method for default calculate_limitation(x, ...)  # S3 method for EQ5D calculate_limitation(x, ...)"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_limitation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate limitation — calculate_limitation","text":"x R object. ... arguments passed methods.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_limitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate limitation — calculate_limitation","text":"data frame fraction individuals without limitation.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_limitation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate limitation — calculate_limitation","text":"","code":"data(\"eq5d3l_example\") dat <- as_eq5d3l(     eq5d3l_example,     respondentID = \"respondentID\",     surveyID = \"surveyID\",     mobility = \"MO\",     self_care = \"SC\",     usual = \"UA\",     pain = \"PD\",     anxiety = \"AD\",     vas = \"vas\" ) calculate_limitation(dat) #> # A data frame: 5 × 3 #>   surveyID dimension without_limitation #>   <fct>    <fct>                  <dbl> #> 1 survey01 MO                     0.525 #> 2 survey01 SC                     0.6   #> 3 survey01 UA                     0.395 #> 4 survey01 PD                     0.17  #> 5 survey01 AD                     0.655"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_pchc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Paretian Classification of Health Change — calculate_pchc","title":"Calculate the Paretian Classification of Health Change — calculate_pchc","text":"calculate_pchc() calculates Paretian Classification Health Change (PCHC) individuals health state two surveys. wraps eq5d::pchc() function providing methods EQ5D objects.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_pchc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Paretian Classification of Health Change — calculate_pchc","text":"","code":"calculate_pchc(pre, post, no.problems = TRUE, by.dimension = FALSE)"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_pchc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Paretian Classification of Health Change — calculate_pchc","text":"pre EQ5D object single survey. post EQ5D object single survey. .problems boolean. Summarise 11111 \"change\" subjects \"problems\"  group. .dimension boolean. Summarise results EQ-5D dimension rather  whole dataset.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_pchc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Paretian Classification of Health Change — calculate_pchc","text":".dimension = FALSE: data frame columns 'Change', 'Number' 'Percent'. .dimension = TRUE: data frame columns 'Dimension', 'Change', 'Number' 'Percent'.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_pchc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Paretian Classification of Health Change — calculate_pchc","text":"","code":"data(\"eq5d3l_example\") dat <- as_eq5d3l(     eq5d3l_example,     respondentID = \"respondentID\",     surveyID = \"surveyID\",     mobility = \"MO\",     self_care = \"SC\",     usual = \"UA\",     pain = \"PD\",     anxiety = \"AD\",     vas = \"vas\",     drop = FALSE ) grp1 <- subset(dat, Group == \"Group1\") grp2 <- subset(dat, Group == \"Group2\") calculate_pchc(grp1, grp2) #> # A data frame: 5 × 3 #>   Change       Number Percent #>   <chr>         <dbl>   <dbl> #> 1 No change        14      14 #> 2 Improve          59      59 #> 3 Worsen           14      14 #> 4 Mixed change     13      13 #> 5 No problems       0       0 calculate_pchc(grp1, grp2, by.dimension = TRUE) #> # A data frame: 20 × 4 #>    .Dimension Change      Number Percent #>    <chr>      <chr>        <dbl>   <dbl> #>  1 MO         No change       31      31 #>  2 MO         Improve         26      26 #>  3 MO         Worsen           7       7 #>  4 MO         No problems     36      36 #>  5 SC         No change       21      21 #>  6 SC         Improve         31      31 #>  7 SC         Worsen           7       7 #>  8 SC         No problems     41      41 #>  9 UA         No change       33      33 #> 10 UA         Improve         43      43 #> 11 UA         Worsen           6       6 #> 12 UA         No problems     18      18 #> 13 PD         No change       59      59 #> 14 PD         Improve         34      34 #> 15 PD         Worsen           3       3 #> 16 PD         No problems      4       4 #> 17 AD         No change       14      14 #> 18 AD         Improve         22      22 #> 19 AD         Worsen          12      12 #> 20 AD         No problems     52      52"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_qalys.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate quality of life years — calculate_qalys","title":"Calculate quality of life years — calculate_qalys","text":"Generic calculating quality life years (QALY) metrics EQ5D survey respondents.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_qalys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate quality of life years — calculate_qalys","text":"","code":"calculate_qalys(x, ...)  # S3 method for default calculate_qalys(x, ...)  # S3 method for EQ5D calculate_qalys(   x,   time_index,   type,   country,   units = c(\"days\", \"weeks\", \"months\", \"quarters\", \"years\"),   baseline_survey = NULL,   ... )  # S3 method for utility calculate_qalys(   x,   time_index,   units = c(\"days\", \"weeks\", \"months\", \"quarters\", \"years\"),   baseline_survey = NULL,   ... )"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_qalys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate quality of life years — calculate_qalys","text":"x R object. ... arguments passed methods. time_index [character] Name variable x representing relative time within survey framework. type [character] Method type(s) used calculating value sets. EQ5D3L inputs can : \"TTO\", time trade-valuation technique; \"VAS\", visual analogue scale valuation technique; \"RCW\", reverse crosswalk conversion EQ5D5L values; \"DSU\", NICE Decision Support Unit's model allows mappings EQ5D5L values accounting age sex. EQ5D5L inputs can : \"VT\",  value sets generated via EuroQol standardised valuation study protocol; \"CW\",  crosswalk conversion EQ5D3L values; \"DSU\", NICE Decision Support Unit's model allows mappings EQ5D5L values accounting age sex. country [character] Value set countries use. units character units time_index column x. Can one \"days\", \"weeks\", \"months\", \"quarters\" \"years\". Note output always QALY (.e years) irrespective unit input. baseline_survey (optional) Either character string specifying surveyID, use baseline data frame. data frame, must least two columns; one respondentID (name matching x input) another (name) associated utility values. desired can also specify columns match utility country type columns input x.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_qalys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate quality of life years — calculate_qalys","text":"data frame.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_qalys.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate quality of life years — calculate_qalys","text":"methods provided utility  EQ5D objects, return two metrics default: Firstly, raw QALY. area utility curve scaled proportion year corresponds . Secondly, loss_v_fullhealth value. represents loss perfect health calculated assuming dimensions 1 calculate full health QALY value. Optionally, third metric can also returned, loss_v_baseline. represents loss specified baseline utility value.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_qalys.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate quality of life years — calculate_qalys","text":"character string baseline_survey argument given must match surveyID match .  situation survey still included unadjusted, raw, calculation, prior calculation loss. Alternatively baseline_survey argument can specified data frame column corresponding respondentID another representing associated utility. Optionally columns corresponding utility country utility type can included allow granular comparisons. specification baseline, included unadjusted, raw, calculation.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_qalys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate quality of life years — calculate_qalys","text":"","code":"data(\"EQ5D5L_surveys\") dat <- as_eq5d5l(     EQ5D5L_surveys,     surveyID = \"surveyID\",     respondentID = \"respondentID\",     mobility = \"mobility\",     self_care = \"self_care\",     usual = \"usual\",     pain = \"pain\",     anxiety = \"anxiety\",     vas = \"vas\" ) calculate_qalys(     dat,     time_index = \"time_index\",     type = \"VT\", country = c(\"Denmark\", \"France\") ) #> # A data frame: 4,000 × 5 #>    respondentID .utility_type .utility_country .qaly .value #>           <int> <chr>         <chr>            <chr>  <dbl> #>  1            1 VT            Denmark          raw    0.544 #>  2            1 VT            France           raw    0.573 #>  3            2 VT            Denmark          raw    0.487 #>  4            2 VT            France           raw    0.503 #>  5            3 VT            Denmark          raw    0.530 #>  6            3 VT            France           raw    0.577 #>  7            4 VT            Denmark          raw    0.276 #>  8            4 VT            France           raw    0.430 #>  9            5 VT            Denmark          raw    0.506 #> 10            5 VT            France           raw    0.575 #> # … with 3,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_utility.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate utility — calculate_utility","title":"Calculate utility — calculate_utility","text":"Generic function calculates EQ5D index scores given value sets.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_utility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate utility — calculate_utility","text":"","code":"calculate_utility(x, type, country, ...)  # S3 method for default calculate_utility(x, type, country, ...)  # S3 method for EQ5D5L calculate_utility(   x,   type = \"VT\",   country = \"England\",   drop = TRUE,   age = NULL,   sex = NULL,   ... )  # S3 method for EQ5D3L calculate_utility(   x,   type = \"VT\",   country = \"England\",   drop = TRUE,   age = NULL,   sex = NULL,   ... )  # S3 method for EQ5DY calculate_utility(   x,   type = \"VT\",   country = \"England\",   drop = TRUE,   age = NULL,   sex = NULL,   ... )  add_utility(x, type, country, ...)  # S3 method for default add_utility(x, type, country, ...)  # S3 method for EQ5D5L add_utility(x, type = \"VT\", country = \"England\", age = NULL, sex = NULL, ...)  # S3 method for EQ5D3L add_utility(x, type = \"VT\", country = \"England\", age = NULL, sex = NULL, ...)  # S3 method for EQ5DY add_utility(x, type = \"VT\", country = \"England\", age = NULL, sex = NULL, ...)"},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_utility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate utility — calculate_utility","text":"x R object. type [character] Method type(s) used calculating value sets. EQ5D3L inputs can : \"TTO\", time trade-valuation technique; \"VAS\", visual analogue scale valuation technique; \"RCW\", reverse crosswalk conversion EQ5D5L values; \"DSU\", NICE Decision Support Unit's model allows mappings EQ5D5L values accounting age sex. EQ5D5L inputs can : \"VT\",  value sets generated via EuroQol standardised valuation study protocol; \"CW\",  crosswalk conversion EQ5D3L values; \"DSU\", NICE Decision Support Unit's model allows mappings EQ5D5L values accounting age sex. country [character] Value set countries use. ... arguments passed methods. drop [logical] TRUE (default), columns corresponding surveyID respondentID kept input x. age [character] Column x representing age, years, respondent. used type = \"DSU\". sex [character] Column x representing sex, years, respondent. used type = \"DSU\". Column entries must one \"Male\", \"M\", \"Female\" \"F\" (case insensitive).","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_utility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate utility — calculate_utility","text":"data frame utility values linked responses.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_utility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate utility — calculate_utility","text":"calculate_utility() returns utility index scores given object value set combination. Methods wrap functionality eq5d package provided EQ5D objects. add_utility() wrapper around calculate_utility() keeps columns input data x.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_utility.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate utility — calculate_utility","text":"methods eq5d objects expect type country length recycle length one common size.","code":""},{"path":[]},{"path":"https://timtaylor.github.io/qalytools/reference/calculate_utility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate utility — calculate_utility","text":"","code":"data(\"eq5d3l_example\") dat <- as_eq5d3l(     eq5d3l_example,     respondentID = \"respondentID\",     surveyID = \"surveyID\",     mobility = \"MO\",     self_care = \"SC\",     usual = \"UA\",     pain = \"PD\",     anxiety = \"AD\",     vas = \"vas\" ) calculate_utility(dat, type = \"TTO\", country = c(\"UK\", \"Germany\")) #> # A data frame: 400 × 5 #>    respondentID surveyID .utility_country .utility_type .value #>  *        <int> <fct>    <chr>            <chr>          <dbl> #>  1            1 survey01 UK               TTO            0.76  #>  2            2 survey01 UK               TTO            0.796 #>  3            3 survey01 UK               TTO           -0.003 #>  4            4 survey01 UK               TTO            0.796 #>  5            5 survey01 UK               TTO            0.656 #>  6            6 survey01 UK               TTO            1     #>  7            7 survey01 UK               TTO            0.691 #>  8            8 survey01 UK               TTO            1     #>  9            9 survey01 UK               TTO            0.656 #> 10           10 survey01 UK               TTO            0.779 #> # … with 390 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://timtaylor.github.io/qalytools/reference/eq5d3l_example.html","id":null,"dir":"Reference","previous_headings":"","what":"EQ-5D-3L example data — eq5d3l_example","title":"EQ-5D-3L example data — eq5d3l_example","text":"dataset containing dimensions grouping 200 observations. Data obtained eq5d package 2022-06-15, additional variables added package compatibility.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/eq5d3l_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EQ-5D-3L example data — eq5d3l_example","text":"","code":"eq5d3l_example"},{"path":"https://timtaylor.github.io/qalytools/reference/eq5d3l_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EQ-5D-3L example data — eq5d3l_example","text":"data frame 200 rows 6 variables: respondentID Unique respondent identifier surveyID Unique survey identifier MO Mobility dimension valuea SC Self-care dimension values UA Usual activities dimension values PD Pain/discomfort dimension values AD Anxiety/depression dimension values Group Observation group vas VAS score time Relative time within survey framework","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/eq5d3l_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EQ-5D-3L example data — eq5d3l_example","text":"https://github.com/fragla/eq5d/raw/master/inst/extdata/eq5d3l_example.xlsx","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_eq5d.html","id":null,"dir":"Reference","previous_headings":"","what":"EQ5D constructors and validators — new_eq5d","title":"EQ5D constructors and validators — new_eq5d","text":"new_eq5d3l(), new_eq5d5l() new_eq5dy() developer facing functions construction EQ5D objects perform minimal checking input data. normally followed call validate_eq5d() ensure assumptions underlying data valid.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_eq5d.html","id":"the-eq-d-class","dir":"Reference","previous_headings":"","what":"The EQ5D class","title":"EQ5D constructors and validators — new_eq5d","text":"define EQ5D object data frame meets following criteria: contains columns represent dimensions EQ5D survey specification well column representing Visual Analogue Score. contains column acts unique respondent identifier another identifies different surveys time. Together uniquely identify response combination duplicated within data frame. EQ5D3L, EQ5D5L EQ5DY objects defined subclass EQ5D objects additional restriction  corresponding dimension columns x either NA whole numbers bounded 1 3 5 (depending survey type).","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_eq5d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EQ5D constructors and validators — new_eq5d","text":"","code":"new_eq5d3l(     x,     respondentID, surveyID,     mobility, self_care, usual, pain, anxiety,     vas )  new_eq5d3l(     x,     respondentID, surveyID,     mobility, self_care, usual, pain, anxiety,     vas )  new_eq5dy(     x,     respondentID, surveyID,     mobility, self_care, usual, pain, anxiety,     vas )  validate_eq5d(x, version)  validate_eq5d3l(x)  validate_eq5d5l(x)  validate_eq5dy(x)"},{"path":"https://timtaylor.github.io/qalytools/reference/new_eq5d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EQ5D constructors and validators — new_eq5d","text":"x [data.frame] EQ5D survey data. respondentID [character] name variable x uniquely identifies respondents. surveyID [character] Name variable x uniquely identifies surveys time. mobility [character] Name 'mobility' dimension x. self_care [character] Name 'self-care' dimension x. usual [character] Name 'usual activities' dimension x. pain [character] Name 'pain / discomfort' dimension x. anxiety [character] Name 'anxiety / depression' dimension x. vas [character] Name 'visual analogue score' variable x. version [character] EQ5D version. One \"3L\", \"5L\" \"Y\".","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_eq5d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EQ5D constructors and validators — new_eq5d","text":"EQ5D3L, EQ5D5L EQ5D3Y object (invisibly corresponding validation functions).","code":""},{"path":[]},{"path":"https://timtaylor.github.io/qalytools/reference/new_eq5d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EQ5D constructors and validators — new_eq5d","text":"","code":"data(\"EQ5D5L_surveys\") dat <- EQ5D5L_surveys dat$surveyID <- factor(dat$surveyID)  res <- new_eq5d5l(dat,     respondentID = \"respondentID\",     surveyID = \"surveyID\",     mobility = \"mobility\",     self_care = \"self_care\",     usual = \"usual\",     pain = \"pain\",     anxiety = \"anxiety\",     vas = \"vas\" )  validate_eq5d(res, version = \"5L\") validate_eq5d5l(res) try(validate_eq5d3l(res)) #> Error in validate_eq5d(x, version = \"3L\") :  #>   Dimensions must be bounded by 1 and 3 or, NA. try(validate_eq5d(res, version = \"3L\")) #> Error in validate_eq5d(res, version = \"3L\") :  #>   Dimensions must be bounded by 1 and 3 or, NA."},{"path":"https://timtaylor.github.io/qalytools/reference/new_utility.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility constructor and validator — new_utility","title":"Utility constructor and validator — new_utility","text":"Construct validate utility objects.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_utility.html","id":"the-utility-class","dir":"Reference","previous_headings":"","what":"The utility class","title":"Utility constructor and validator — new_utility","text":"utility object contains object meets following criteria: contains column acts unique respondent identifier another identifies different surveys time. contains additional columns represent country, type value utility previously calculated. Together, combination respondent identifier, survey identifier, utility country utility type unique duplicated across rows.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_utility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility constructor and validator — new_utility","text":"","code":"new_utility(x, respondentID, surveyID, country, type, value)  validate_utility(xx)"},{"path":"https://timtaylor.github.io/qalytools/reference/new_utility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility constructor and validator — new_utility","text":"x [data.frame]. respondentID [character] Unique respondent identifier. name variable x uniquely identifies respondents. surveyID [character] Name variable x uniquely identifies surveys time. avoid ambiguity specified variable must either numeric factor (case order taken given factor levels). country [character] Name variable x representing utility country. type [character] Name variable x representing utility country. value [character] Name variable x representing utility value. xx R Object validate.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_utility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility constructor and validator — new_utility","text":"utility object (invisibly validate_utility()).","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/new_utility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility constructor and validator — new_utility","text":"new_utility() creates utility object minimal checking input arguments. mainly developer use normally accompanied call validate_utility() performs checking underlying data.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/qalytools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for Analysing EQ5D Surveys — qalytools-package","title":"Tools for Analysing EQ5D Surveys — qalytools-package","text":"qalytools provides simple intuitive user interface analysis repeated EQ-5D surveys, facilitating calculation QALY values related metrics. package provides range functions: Constructors (validators) EQ5D data frame subclasses (EQ5D3L, EQ5D5L EQ5D): new_eq5d3l() (validate_eq5d3l()), new_eq5d5l() (validate_eq5d5l()) new_eq5dy() (validate_eq5dy()). User-friendly coercion functions as_eq5d3l(), as_eq5d5l() as_eq5dy(). calculation utility values based range different value sets. functionality provided via calculate_utility(), add_utility() available_valuesets() functions wrappers around eq5d package. calculation different Quality Life Years (QALY) metrics including unadjusted 'raw' values, disutility perfect health , optionally, specified baseline. See calculate_qalys(). calculation Paretian Classification Health Change (PCHC) individual's health state two surveys via calculate_pchc() (wrapping eq5d package). Easy calculation responses health limitation (.e. non-one response one dimensions) via calculate_limitation(). See vignette(\"qalytools\") introduction main functionality package vignette(\"example_analysis\") illustration package can used part larger analysis.","code":""},{"path":[]},{"path":"https://timtaylor.github.io/qalytools/reference/qalytools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tools for Analysing EQ5D Surveys — qalytools-package","text":"Maintainer: Tim Taylor timothy.taylor@ukhsa.gov.uk (ORCID) contributors: Crown Copyright [copyright holder, funder]","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/s3_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a method for a suggested dependency — s3_register","title":"Register a method for a suggested dependency — s3_register","text":"Generally, recommend way register S3 method use S3Method() namespace directive (often generated automatically @export roxygen2 tag). However, technique requires generic imported package, sometimes want suggest package, provide method package loaded. s3_register() can called package's .onLoad() dynamically register method generic's package loaded.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/s3_register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a method for a suggested dependency — s3_register","text":"generic Name generic form pkg::generic. class Name class method Optionally, implementation method. default, found looking function called generic.class package environment. Note providing method can dangerous use devtools. namespace method reloaded devtools::load_all(), function keep inheriting old namespace. might cause crashes dangling .Call() pointers.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/s3_register.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a method for a suggested dependency — s3_register","text":"R 3.5.0 later, s3_register() also useful demonstrating class creation vignette, since method lookup longer always involves lexical scope. R 3.6.0 later, can achieve similar effect using \"delayed method registration\", .e. placing following NAMESPACE file:","code":"if (getRversion() >= \"3.6.0\") {   S3method(package::generic, class) }"},{"path":"https://timtaylor.github.io/qalytools/reference/s3_register.html","id":"usage-in-other-packages","dir":"Reference","previous_headings":"","what":"Usage in other packages","title":"Register a method for a suggested dependency — s3_register","text":"avoid taking dependency vctrs, copy source s3_register() package. licensed permissive unlicense make crystal clear happy . need include license even credit us using function.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/s3_register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a method for a suggested dependency — s3_register","text":"","code":"# A typical use case is to dynamically register tibble/pillar methods # for your class. That way you avoid creating a hard dependency on packages # that are not essential, while still providing finer control over # printing when they are used.  .onLoad <- function(...) {     s3_register(\"pillar::pillar_shaft\", \"vctrs_vctr\")     s3_register(\"tibble::type_sum\", \"vctrs_vctr\") }"},{"path":"https://timtaylor.github.io/qalytools/reference/summary.EQ5D.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for eq5d objects — summary.EQ5D","title":"Summary method for eq5d objects — summary.EQ5D","text":"Provides summary dimension values survey ID.","code":""},{"path":"https://timtaylor.github.io/qalytools/reference/summary.EQ5D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for eq5d objects — summary.EQ5D","text":"","code":"# S3 method for EQ5D summary(object, ..., tidy = FALSE)"},{"path":"https://timtaylor.github.io/qalytools/reference/summary.EQ5D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for eq5d objects — summary.EQ5D","text":"object EQ5D object. ... currently used. tidy [logical] results returned single, \"tidy\", table long format. FALSE, output list frequency / proportion tables split survey ID.","code":""},{"path":"https://timtaylor.github.io/qalytools/news/index.html","id":"qalytools-0029000","dir":"Changelog","previous_headings":"","what":"qalytools 0.0.2.9000","title":"qalytools 0.0.2.9000","text":"WIP - Package active development!","code":""}]
